#+TITLE: 01.org
#+AUTHOR: Jeong Hoon Choi
#+DATE: 2024.01.30

* Perceptron
#+begin_src python :results output

import random
import matplotlib.pyplot as plt

def compute_output(w, x):
    z=0.0
    assert(len(x)==len(w))
    for i in range(len(w)):
        z+=w[i]*x[i]

    if z<0: return -1
    else: return 1
    
def show_learning(w):
    global color_index
    print("w0 = ", "%5.2f"%w[0], ", w1 = ", "%5.2f"%w[1], ", w2 = ", "%5.2f"%w[2])
    if color_index==0:
        plt.plot([1.0], [1.0], "b-", markersize=12)
        plt.plot([-1.0, 1.0, -1.0], [1.0, -1.0, -1.0], "r+", markersize=12)
        plt.axis([-2, 2, -2, 2])
        plt.xlabel("x1")
        plt.ylabel("x2")

    x=[-2.0, 2.0]
    if abs(w[2]) <1e-5:
        y=[-w[1]/(1e-5)*(-2.0)+(-w[0]/(1e-5)),
           -w[1]/(1e-5)*(2.0)+(-w[0]/(1e-5))]
    else:
        y=[-w[1]/w[2]*(-2.0)+(-w[0]/w[2]),
           -w[1]/w[2]*(2.0)+(-w[0]/w[2])]

    plt.plot(x, y, color_list[color_index])
    if color_index<(len(color_list)-1):
        color_index+=1
    
    
if __name__ == "__main__":
    random.seed(2024)
    LEARNING_RATE=0.1

    index_list=[0, 1, 2, 3]
    color_index=0
    color_list=["r-", "m-", "y-", "c-", "b-", "g-"]

    x_train=[(1.0, -1.0, -1.0),
             (1.0, -1.0, 1.0),
             (1.0, 1.0, -1.0),
             (1.0, 1.0, 1.0)]
    y_train=[1.0, 1.0, 1.0, -1.0]

    w=[0.2, -0.6, 0.25]

    all_correct=False

    while not all_correct:
        all_correct=True
        random.shuffle(index_list)
        for i in index_list:
            x=x_train[i]
            y=y_train[i]
            p_out=compute_output(w, x)

            if y!=p_out:
                for j in range(0, len(w)):
                    w[j]+=(y*LEARNING_RATE*x[j])
                all_correct=False
                show_learning(w)

    plt.show()

#+end_src

#+RESULTS:
: w0 =   0.30 , w1 =  -0.50 , w2 =   0.15
: w0 =   0.40 , w1 =  -0.40 , w2 =   0.05
: w0 =   0.30 , w1 =  -0.50 , w2 =  -0.05
: w0 =   0.40 , w1 =  -0.40 , w2 =  -0.15

#+begin_src python

import numpy as np

def compute_output_vector(w, x):
    z=np.dot(w, x)
    return np.sign(z)


#+end_src
