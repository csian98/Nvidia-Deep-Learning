#+TITLE: 04.org
#+AUTHOR: Jeong Hoon Choi
#+DATE: 2024.02.03

* MNIST
#+begin_src python

import os
import wget
import gzip
import shutil

url="http://yann.lecun.com/exdb/mnist/"
file=["train-images-idx3-ubyte.gz", "train-labels-idx1-ubyte.gz",
      "t10k-images-idx3-ubyte.gz", "t10k-labels-idx1-ubyte.gz"]
output="../data/mnist/"
downloaded=[]

for f in file:
    fname=wget.download(url+f, out=output)
    downloaded.append(fname)

for f in downloaded:
    with gzip.open(f, "rb") as f_in:
        with open(f[:-3], "wb") as f_out:
            shutil.copyfileobj(f_in, f_out)
    os.remove(f)

#+end_src

#+RESULTS:
: None

#+begin_src python :results output

import idx2numpy

TRAIN_IMAGE_FILENAME="../data/mnist/train-images-idx3-ubyte"
TRAIN_LABEL_FILENAME="../data/mnist/train-labels-idx1-ubyte"
TEST_IMAGE_FILENAME="../data/mnist/t10k-images-idx3-ubyte"
TEST_LABEL_FILENAME="../data/mnist/t10k-labels-idx1-ubyte"

train_images=idx2numpy.convert_from_file(TRAIN_IMAGE_FILENAME)
train_labels=idx2numpy.convert_from_file(TRAIN_LABEL_FILENAME)
test_images=idx2numpy.convert_from_file(TEST_IMAGE_FILENAME)
test_labels=idx2numpy.convert_from_file(TEST_LABEL_FILENAME)

print("dimensions of train_images: ", train_images.shape)
print("dimensions of train_labels: ", train_labels.shape)
print("dimensions of test_images: ", test_images.shape)
print("dimensions of test_labels: ", test_labels.shape)


print("label for first training example: ", train_labels[0])
print("-----")
for line in train_images[0]:
    for num in line:
        if num > 0:
            print("#", end="")
        else:
            print(" ", end="")
    print("")
print("-----")

#+end_src

#+RESULTS:
#+begin_example
dimensions of train_images:  (60000, 28, 28)
dimensions of train_labels:  (60000,)
dimensions of test_images:  (10000, 28, 28)
dimensions of test_labels:  (10000,)
label for first training example:  5
-----
                            
                            
                            
                            
                            
            ############    
        ################    
       ################     
       ###########          
        ####### ##          
         #####              
           ####             
           ####             
            ######          
             ######         
              ######        
               #####        
                 ####       
              #######       
            ########        
          #########         
        ##########          
      ##########            
    ##########              
    ########                
                            
                            
                            
-----
#+end_example

* DNN
#+begin_src python

import numpy as np
import matplotlib.pyplot as plt
import idx2numpy

def read_mnist():
    TRAIN_IMAGE_FILENAME="../data/mnist/train-images-idx3-ubyte"
    TRAIN_LABEL_FILENAME="../data/mnist/train-labels-idx1-ubyte"
    TEST_IMAGE_FILENAME="../data/mnist/t10k-images-idx3-ubyte"
    TEST_LABEL_FILENAME="../data/mnist/t10k-labels-idx1-ubyte"
    train_images=idx2numpy.convert_from_file(TRAIN_IMAGE_FILENAME)
    train_labels=idx2numpy.convert_from_file(TRAIN_LABEL_FILENAME)
    test_images=idx2numpy.convert_from_file(TEST_IMAGE_FILENAME)
    test_labels=idx2numpy.convert_from_file(TEST_LABEL_FILENAME)
    
    x_train=train_images.reshape(60000, 784)
    mean=np.mean(x_train)
    stddev=np.std(x_train)
    x_train=(x_train-mean)/stddev
    x_test=test_images.reshape(10000, 784)
    x_test=(x_test-mean)/stddev
    
    y_train=np.zeros((60000, 10))
    y_test=np.zeros((10000, 10))
    for i, y in enumerate(train_labels):
        y_train[i][y]=1
    for i, y in enumerate(test_labels):
        y_test[i][y]=1
    
    return x_train, y_train, x_test, y_test

def layer_w(neuron_count, input_count):
    weights=np.zeros((neuron_count, input_count+1))
    for i in range(neuron_count):
        for j in range(1, input_count+1):
            weights[i][j]=np.random.uniform(-0.1, 0.1)
    return weights

def show_learning(epoch_no, train_acc, test_acc):
    global chart_x
    global chart_y_train
    global chart_y_test
    
    print("Epoch No: ", epoch_no, ", train_acc: ", "%6.4f"%train_acc,
          ", test_acc: ", "%6.4f"%test_acc)
    chart_x.append(epoch_no+1)
    chart_y_train.append(1.0-train_acc)
    chart_y_test.append(1.0-test_acc)

def plot_learning():
    plt.plot(chart_x, chart_y_train, "r-", label="Training Error")
    plt.plot(chart_x, chart_y_test, "b-", label="Test Error")
    plt.axis([0, len(chart_x), 0.0, 1.0])
    plt.xlabel("Train Epoch")
    plt.ylabel("Error")
    plt.legend()
    plt.show()

def forward_pass(x):
    global hidden_layer_y
    global output_layer_y
    for i, w in enumerate(hidden_layer_w):
        z=np.dot(w, x)
        hidden_layer_y[i]=np.tanh(z)
    hidden_output_array=np.concatenate(
        (np.array([1.0]), hidden_layer_y)
    )
    
    for i, w in enumerate(output_layer_w):
        z=np.dot(w, hidden_output_array)
        output_layer_y[i]=1.0/(1.0+np.exp(-z))

def backward_pass(y_truth):
    global hidden_layer_error
    global output_layer_error
    
    for i, y in enumerate(output_layer_y):
        error_prime=-(y_truth[i]-y)
        derivative=y*(1.0-y)
        output_layer_error[i]=error_prime*derivative
    for i, y in enumerate(hidden_layer_y):
        error_weights=[]
        for w in output_layer_w:
            error_weights.append(w[i+1])
        error_weights_array=np.array(error_weights)
        derivative=1.0-y**2
        weighted_error=np.dot(error_weights_array, output_layer_error)
        hidden_layer_error[i]=weighted_error*derivative

def adjust_weights(x):
    global output_layer_w
    global hidden_layer_w
    for i, error in enumerate(hidden_layer_error):
        hidden_layer_w[i]-=(x*LEARNING_RATE*error)
    hidden_output_array=np.concatenate(
        (np.array([1.0]), hidden_layer_y)
    )
    for i, error in enumerate(output_layer_error):
        output_layer_w[i]-=(hidden_output_array*LEARNING_RATE*error)

if __name__ == "__main__":
    np.random.seed(2024)
    LEARNING_RATE=0.01
    EPOCHS=20
    
    x_train, y_train, x_test, y_test=read_mnist()
    index_list=list(range(len(x_train)))
    
    hidden_layer_w=layer_w(25, 784)
    hidden_layer_y=np.zeros(25)
    hidden_layer_error=np.zeros(25)
    
    output_layer_w=layer_w(10, 25)
    output_layer_y=np.zeros(10)
    output_layer_error=np.zeros(10)
    
    chart_x=[]
    chart_y_train=[]
    chart_y_test=[]
    
    # Training
    for i in range(EPOCHS):
        np.random.shuffle(index_list)
        correct_training_results=0
        for j in index_list:
            x=np.concatenate((np.array([1.0]), x_train[j]))
            forward_pass(x)
            if output_layer_y.argmax()==y_train[j].argmax():
                correct_training_results+=1
            backward_pass(y_train[j])
            adjust_weights(x)
        
        correct_test_results=0
        for j in range(len(x_test)):
            x=np.concatenate((np.array([1.0]), x_test[j]))
            forward_pass(x)
            if output_layer_y.argmax()==y_test[j].argmax():
                correct_test_results+=1
        
        show_learning(i, correct_training_results/len(x_train),
                      correct_test_results/len(x_test))
    
    plot_learning()

#+end_src

#+RESULTS:
#+begin_example
Epoch No:  0 , train_acc:  0.8641 , test_acc:  0.9195
Epoch No:  1 , train_acc:  0.9204 , test_acc:  0.9268
Epoch No:  2 , train_acc:  0.9277 , test_acc:  0.9270
Epoch No:  3 , train_acc:  0.9328 , test_acc:  0.9278
Epoch No:  4 , train_acc:  0.9365 , test_acc:  0.9297
Epoch No:  5 , train_acc:  0.9390 , test_acc:  0.9337
Epoch No:  6 , train_acc:  0.9402 , test_acc:  0.9370
Epoch No:  7 , train_acc:  0.9423 , test_acc:  0.9347
Epoch No:  8 , train_acc:  0.9442 , test_acc:  0.9382
Epoch No:  9 , train_acc:  0.9445 , test_acc:  0.9347
Epoch No:  10 , train_acc:  0.9469 , test_acc:  0.9362
Epoch No:  11 , train_acc:  0.9480 , test_acc:  0.9356
Epoch No:  12 , train_acc:  0.9491 , test_acc:  0.9369
Epoch No:  13 , train_acc:  0.9497 , test_acc:  0.9378
Epoch No:  14 , train_acc:  0.9503 , test_acc:  0.9373
Epoch No:  15 , train_acc:  0.9512 , test_acc:  0.9337
Epoch No:  16 , train_acc:  0.9509 , test_acc:  0.9365
Epoch No:  17 , train_acc:  0.9519 , test_acc:  0.9384
Epoch No:  18 , train_acc:  0.9535 , test_acc:  0.9362
Epoch No:  19 , train_acc:  0.9535 , test_acc:  0.9389
#+end_example
